% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/read_dv.R
\name{read_dv}
\alias{read_dv}
\title{Read a datavolley file}
\usage{
read_dv(filename, insert_technical_timeouts = TRUE, do_warn = FALSE,
  do_transliterate = FALSE, encoding = "guess", extra_validation = 2,
  surname_case = "asis",
  skill_evaluation_decode = skill_evaluation_decoder(), custom_code_parser,
  metadata_only = FALSE, verbose = FALSE)
}
\arguments{
\item{filename}{string: file name to read}

\item{insert_technical_timeouts}{logical or list: should we insert technical timeouts? If TRUE, technical timeouts are inserted at points 8 and 16 of sets 1--4. Otherwise a two-element list can be supplied, giving the point-scores at which technical timeouts will be inserted for sets 1--4, and  set 5.}

\item{do_warn}{logical: should we issue warnings about the contents of the file as we read it?}

\item{do_transliterate}{logical: should we transliterate all text to ASCII? See details}

\item{encoding}{character: text encoding to use. Text is converted from this encoding to UTF-8. A vector of multiple encodings can be provided, and this function will attempt to choose the best (experimental). If encoding=="guess", the encoding will be guessed (really experimental)}

\item{extra_validation}{numeric: should we run some extra validation checks on the file? (Will be slower). 0=no extra validation, 1=check for major errors, 2=somewhat more extensive, 3=the most extra checking.}

\item{surname_case}{string or function: should we change the case of player surnames? If \code{surname_case} is a string, valid values are "upper","lower","title", or "asis"; otherwise \code{surname_case} may be a function that will be applied to the player surname strings}

\item{skill_evaluation_decode}{function: function to use to convert skill evaluation codes into meaningful phrases. See \code{\link{skill_evaluation_decoder}}}

\item{custom_code_parser}{function: function to process any custom codes that might be present in the datavolley file. This function takes one input (the \code{datavolley} object) and should return a list with two named components: \code{plays} and \code{messages}}

\item{metadata_only}{logical: don't process the plays component of the file, just the match and player metadata}

\item{verbose}{logical: if TRUE, show progress}
}
\value{
named list with several components. \code{meta} provides match metadata, \code{plays} is the main point-by-point data in the form of a data.frame. \code{raw} is the line-by-line content of the datavolley file. \code{messages} is a data.frame describing any inconsistencies found in the file
}
\description{
The \code{do_transliterate} option may be helpful when trying to work with multiple files from the same competition, since different text encodings may be used on different files. This can lead to e.g. multiple versions of the same team name. Transliterating can help avoid this, at the cost of losing e.g. diacriticals. Transliteration is applied after converting from the specified text encoding to UTF-8. Common encodings used with DataVolley files include "windows-1252" (western Europe), "windows-1250" (central Europe), "iso-8859-1" (western Europe and Americas), "iso-8859-2" (central/eastern Europe), "iso-8859-13" (Baltic languages)
}
\examples{
\dontrun{
  ## to read the example file bundled with the package
  x <- read_dv(system.file("extdata/example_data.dvw",package="datavolley"),
    insert_technical_timeouts=FALSE)
  summary(x)

  ## or to read your own file, omit the system.file() part:
  x <- read_dv("c:/some/path/myfile.dvw",insert_technical_timeouts=FALSE)

  ## Insert a technical timeout at point 12 in sets 1 to 4:
  x <- read_dv(system.file("extdata/example_data.dvw",package="datavolley"),
    insert_technical_timeouts=list(c(12),NULL))
}
}
\references{
\url{http://www.dataproject.com/IT/en/Volleyball}
}
\seealso{
\code{\link{skill_evaluation_decoder}} \code{\link{validate_dv}}
}
